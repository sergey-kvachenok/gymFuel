/**
 * Centralized Test Selectors
 *
 * This file contains all data-testid selectors used in e2e tests.
 * All selectors should be defined here to ensure consistency and easy maintenance.
 *
 * Naming Convention:
 * - Use kebab-case for selector names
 * - Group by component/feature
 * - Use descriptive names that indicate the element's purpose
 */

// Authentication Selectors
export const AUTH_SELECTORS = {
  LOGIN_EMAIL: 'login-email',
  LOGIN_PASSWORD: 'login-password',
  LOGIN_SUBMIT: 'login-submit',
  LOGOUT_BUTTON: 'logout-button',
  REGISTER_EMAIL: 'register-email',
  REGISTER_PASSWORD: 'register-password',
  REGISTER_NAME: 'register-name',
  REGISTER_SUBMIT: 'register-submit',
} as const;

// Dashboard Selectors
export const DASHBOARD_SELECTORS = {
  WELCOME: 'dashboard-welcome',
  DAILY_STATS: 'daily-stats',
  GOALS_PROGRESS: 'goals-progress',
  TODAYS_MEALS: 'todays-meals',
  MEALS_LIST: 'meals-list',
} as const;

// Product Form Selectors
export const PRODUCT_SELECTORS = {
  FORM: 'product-form',
  FORM_TITLE: 'product-form-title',
  FORM_ERROR: 'product-form-error',
  NAME: 'product-name',
  CALORIES: 'product-calories',
  PROTEIN: 'product-protein',
  FAT: 'product-fat',
  CARBS: 'product-carbs',
  SUBMIT: 'product-submit',
  LIST: 'product-list',
  ITEM: 'my-products-item', // Generated by EditableList based on title
} as const;

// Consumption Form Selectors
export const CONSUMPTION_SELECTORS = {
  FORM: 'consumption-form',
  AMOUNT: 'consumption-amount',
  SUBMIT: 'consumption-submit',
} as const;

// Goals Selectors
export const GOALS_SELECTORS = {
  FORM: 'goals-form',
  CALORIES: 'goals-calories',
  PROTEIN: 'goals-protein',
  FAT: 'goals-fat',
  CARBS: 'goals-carbs',
  GOAL_TYPE: 'goals-goal-type',
  SUBMIT: 'goals-submit',
} as const;

// History Selectors
export const HISTORY_SELECTORS = {
  PAGE: 'history-page',
  FILTERS: 'history-filters',
  PRODUCT_FILTER: 'product-filter',
  CONSUMPTION_ENTRY: 'consumption-entry',
  PRODUCT_NAME: 'product-name',
  AMOUNT: 'amount',
  DATE: 'date',
} as const;

// Navigation Selectors
export const NAVIGATION_SELECTORS = {
  NAV_GOALS: 'nav-goals',
  NAV_HISTORY: 'nav-history',
  NAV_DASHBOARD: 'nav-dashboard',
} as const;

// Common UI Selectors
export const UI_SELECTORS = {
  LOADING: 'loading',
  ERROR: 'error',
  SUCCESS: 'success',
  EMPTY_STATE: 'empty-state',
  OFFLINE_BANNER: 'offline-banner',
  ERROR_MESSAGE: 'error-message',
} as const;

// CSS Class Selectors (for cases where data-testid is not available)
export const CSS_SELECTORS = {
  SIDE_PANEL_BACKDROP: '.fixed.inset-0.bg-black\\/50',
  SIDE_PANEL_CLOSE: '[data-testid*="close"]',
} as const;

// Button Text Selectors (for role-based selection)
export const BUTTON_TEXTS = {
  ADD_PRODUCT: 'Add Product',
  ADD_CONSUMPTION: 'Add Consumption',
  PRODUCTS_LIST: 'Products List',
  CLOSE: 'Close',
} as const;

// Form Placeholder Selectors
export const PLACEHOLDER_TEXTS = {
  SELECT_PRODUCT: 'Select a product...',
} as const;

// Combined Selectors Object for easy importing
export const SELECTORS = {
  AUTH: AUTH_SELECTORS,
  DASHBOARD: DASHBOARD_SELECTORS,
  PRODUCT: PRODUCT_SELECTORS,
  CONSUMPTION: CONSUMPTION_SELECTORS,
  GOALS: GOALS_SELECTORS,
  HISTORY: HISTORY_SELECTORS,
  NAVIGATION: NAVIGATION_SELECTORS,
  UI: UI_SELECTORS,
  CSS: CSS_SELECTORS,
  BUTTON_TEXTS,
  PLACEHOLDER_TEXTS,
} as const;

// Type definitions for better TypeScript support
export type AuthSelector = (typeof AUTH_SELECTORS)[keyof typeof AUTH_SELECTORS];
export type DashboardSelector = (typeof DASHBOARD_SELECTORS)[keyof typeof DASHBOARD_SELECTORS];
export type ProductSelector = (typeof PRODUCT_SELECTORS)[keyof typeof PRODUCT_SELECTORS];
export type ConsumptionSelector =
  (typeof CONSUMPTION_SELECTORS)[keyof typeof CONSUMPTION_SELECTORS];
export type GoalsSelector = (typeof GOALS_SELECTORS)[keyof typeof GOALS_SELECTORS];
export type HistorySelector = (typeof HISTORY_SELECTORS)[keyof typeof HISTORY_SELECTORS];
export type NavigationSelector = (typeof NAVIGATION_SELECTORS)[keyof typeof NAVIGATION_SELECTORS];
export type UISelector = (typeof UI_SELECTORS)[keyof typeof UI_SELECTORS];

// Helper function to get selector with validation
export function getSelector(category: keyof typeof SELECTORS, selector: string): string {
  const categorySelectors = SELECTORS[category];
  if (typeof categorySelectors === 'object' && selector in categorySelectors) {
    return categorySelectors[selector as keyof typeof categorySelectors];
  }
  throw new Error(`Selector "${selector}" not found in category "${category}"`);
}

// Helper function to get button text
export function getButtonText(button: keyof typeof BUTTON_TEXTS): string {
  return BUTTON_TEXTS[button];
}

// Helper function to get placeholder text
export function getPlaceholderText(placeholder: keyof typeof PLACEHOLDER_TEXTS): string {
  return PLACEHOLDER_TEXTS[placeholder];
}
