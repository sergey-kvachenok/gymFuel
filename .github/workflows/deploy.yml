name: Deploy to Environments

on:
  workflow_run:
    workflows: ['CI Pipeline']
    types:
      - completed
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - staging
          - production

jobs:
  # Check if staging contains safe code for production deployment
  check-staging-safety:
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'
    runs-on: ubuntu-latest
    outputs:
      staging-is-safe: ${{ steps.check-staging.outputs.is-safe }}
      staging-commit: ${{ steps.check-staging.outputs.commit }}
    steps:
      - name: Check if staging contains safe code
        id: check-staging
        uses: actions/github-script@v7
        with:
          script: |
            console.log('üîç Checking if staging contains safe code...');

            // Get recent deploy workflow runs
            const { data: deployRuns } = await github.rest.actions.listWorkflowRunsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'deploy.yml',
              branch: 'main',
              status: 'completed',
              per_page: 100
            });

            console.log(`Found ${deployRuns.workflow_runs.length} deploy runs`);

            // Find the last successful staging deployment
            let lastStagingDeploy = null;

            // Check successful runs to find the most recent staging deployment
            for (const run of deployRuns.workflow_runs) {
              if (run.conclusion !== 'success') continue;
              
              try {
                // Get jobs for this workflow run
                const { data: jobsData } = await github.rest.actions.listJobsForWorkflowRun({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  run_id: run.id
                });
                
                // Check if this run contains a staging deployment job
                const hasStagingJob = jobsData.jobs.some(job => 
                  job.name?.includes('deploy-staging')
                );
                
                if (hasStagingJob) {
                  lastStagingDeploy = run;
                  break; // Found the most recent staging deployment, stop searching
                }
              } catch (error) {
                console.log(`‚ö†Ô∏è Could not fetch jobs for run ${run.id}: ${error.message}`);
                continue;
              }
              
            }

            if (!lastStagingDeploy) {
              core.setFailed('‚ùå No successful staging deployments found');
              return;
            }

            console.log(`üìÖ Last staging deploy: ${new Date(lastStagingDeploy.created_at).toLocaleString()}`);
            console.log(`üîó Deploy run: ${lastStagingDeploy.html_url}`);

            // Check if it was triggered by workflow_run (automatic = safe)
            const isAutomatic = lastStagingDeploy.event === 'workflow_run';
            const commit = lastStagingDeploy.head_sha;

            if (isAutomatic) {
              console.log('‚úÖ Last staging deploy was AUTOMATIC (after successful CI)');
              console.log(`üõ°Ô∏è  Staging contains safe code from commit: ${commit}`);
              console.log('üöÄ Production deployment allowed with the same commit');
              
              core.setOutput('is-safe', 'true');
              core.setOutput('commit', commit);
            } else {
              console.log('‚ùå Last staging deploy was MANUAL');
              console.log('‚ö†Ô∏è  Staging may contain untested code');
              core.setFailed('‚ùå Cannot deploy to production: staging contains manually deployed (potentially unsafe) code. Push new changes to trigger automatic staging deployment first.');
            }

  # Auto-deploy to staging on main branch push (only if CI passed)
  deploy-staging:
    if: github.event.workflow_run.conclusion == 'success'
    uses: ./.github/workflows/deploy-reusable.yml
    with:
      environment: staging
      is_production: false
      vercel_production: true
    secrets:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_STAGING }}
      DATABASE_URL: ${{ secrets.DATABASE_URL_STAGING }}

  # Manual deploy to production (ONLY if staging contains safe code)
  deploy-production:
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production' && needs.check-staging-safety.outputs['staging-is-safe'] == 'true'
    needs: check-staging-safety
    concurrency:
      group: production
      cancel-in-progress: true
    uses: ./.github/workflows/deploy-reusable.yml
    with:
      environment: production
      is_production: true
      vercel_production: true
      commit-sha: ${{ needs.check-staging-safety.outputs['staging-commit'] }}
    secrets:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_PRODUCTION }}
      DATABASE_URL: ${{ secrets.DATABASE_URL_PRODUCTION }}

  # Manual deploy to staging (no CI check needed)
  deploy-staging-manual:
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging'
    uses: ./.github/workflows/deploy-reusable.yml
    with:
      environment: staging
      is_production: false
      vercel_production: true
    secrets:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_STAGING }}
      DATABASE_URL: ${{ secrets.DATABASE_URL_STAGING }}
